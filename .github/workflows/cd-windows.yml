name: CD (Windows)

on:
  push:
    branches:
    - appcenter
    - appcenter-uwp

jobs:
  # UWP project build
  windows-build:
    runs-on: windows-latest
    env:
      Configuration: Release
      Platform: "x64"
      AppxBundlePlatforms: "x64"
      AppxBundle: Always
      Signing_Certificate: LancelotSoftwareLLC.pfx
      TELERIK_ACCOUNT_USERNAME: ${{ secrets.TELERIK_ACCOUNT_USERNAME }}
      TELERIK_ACCOUNT_PASSWORD: ${{ secrets.TELERIK_ACCOUNT_PASSWORD }}
      NuGetConfig_Path: src\DevReach2020\nuget.config
      Solution_Path: src\DevReach2020\DevReach2020.Forms_UWPOnly.sln
      Project_Directory: src\DevReach2020\DevReach2020.Forms\UWP
      Project_Path: src\DevReach2020\DevReach2020.Forms\UWP\DevReach2020.Forms.UWP.csproj

    steps:
    # ****************** Option 1 - AppCenter Release ****************** #

    # Trigger AppCenter release (i.e. release to QA testers and/or Store)
    - name: AppCenter Release to QA Groups
      run: |
        npm install -g appcenter-cli
        appcenter build queue --app "lance-mccarthy-1uw5/devreach-2020-uwp" --branch "appcenter" --token ${{ secrets.APPCENTER_API_TOKEN }}
    
    # ****************** Option 2 - Side-Loadable Package (bonus! hosted appinstaller webpage on Azure blob storage ****************** #

    - name: Configure Pagefile (increase RAM)
      uses: al-cheb/configure-pagefile-action@v1.2
      with:
        minimum-size: 32GB
        maximum-size: 32GB
        disk-root: "C:"
    
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Generate version number
      run: |
        $buildDay = Get-Date -Format "yyyy.Mdd"
        $ver = $buildDay + "." + $env:GITHUB_RUN_NUMBER + ".0"
        echo "APP_VERSION=$ver" >> $GITHUB_ENV

    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v1.0.2

    - name: NuGet Restore
      run: nuget restore ${{ env.Solution_Path }} -ConfigFile ${{ env.NuGetConfig_Path }}
    
    - name: Update manifest version
      run: |
        [xml]$manifest = get-content "src\DevReach2020\DevReach2020.Forms\UWP\Package.appxmanifest"
        $manifest.Package.Identity.Version = "$env:APP_VERSION"
        $manifest.Package.Identity.Publisher = "CN='Lancelot Software, LLC', O='Lancelot Software, LLC', L=NORTH BILLERICA, S=Massachusetts, C=US"
        $manifest.Package.Properties.DisplayName = "DevReach Companion"
        $manifest.Package.Properties.PublisherDisplayName = "Lancelot Software"
        $manifest.Package.Applications.Application.VisualElements.DisplayName = "DevReach Companion"
        $manifest.save("src\DevReach2020\DevReach2020.Forms\UWP\Package.appxmanifest")
    
    - name: Decode the pfx
      run: |
        $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.Base64_Encoded_Pfx }}")
        $certificatePath = Join-Path -Path $env:Project_Directory -ChildPath $env:Signing_Certificate
        [IO.File]::WriteAllBytes("$certificatePath", $pfx_cert_byte)

    - name: Build UWP Project
      run: msbuild $env:Solution_Path /p:Platform=$env:Platform /p:AppxBundlePlatforms=$env:AppxBundlePlatforms /p:GenerateAppInstallerFile=$env:GenerateAppInstaller /p:AppInstallerUri=$env:AppInstallerUri /p:HoursBetweenUpdateChecks=$env:HoursBetweenUpdateChecks /p:Configuration=$env:Configuration /p:UapAppxPackageBuildMode=$env:AppxPackageBuildMode /p:AppxBundle=$env:AppxBundle /p:PackageCertificateKeyFile=$env:Signing_Certificate /p:PackageCertificatePassword=${{ secrets.Pfx_Key }}
      env:
        AppxPackageBuildMode: SideloadOnly
        GenerateAppInstaller: true
        HoursBetweenUpdateChecks: 24
        AppInstallerUri: https://dvlup.blob.core.windows.net/general-app-files/Installers/DevReachCompanion/
    
    - name: Remove the pfx
      run: Remove-Item -path $env:Project_Directory\$env:Signing_Certificate

    - name: Upload AppInstaller and website to Azure Storage
      uses: LanceMcCarthy/Action-AzureBlobUpload@v1.7
      with:
        connection_string: ${{ secrets.AZURE_STORAGE_CONNECTION_STRING }}
        container_name: general-app-files
        source_folder: ${{ env.Project_Directory }}\AppPackages\
        destination_folder: Installers/DevReachCompanion
        clean_destination_folder: true

    - name: Upload build artifacts
      uses: actions/upload-artifact@v2
      with:
        name: UWP_Sideload_Artifacts
        path: ${{ env.Project_Directory }}\AppPackages\
    
    
    # ****************** Option 3 - Upload Directly to Microsoft Store  ******************* #

    # Update the appxmanifest for Microsoft Store using the publisher info
    - name: Update manifest version
      run: |
        [xml]$manifest = get-content "src\DevReach2020\DevReach2020.Forms\UWP\Package.appxmanifest"
        $manifest.Package.Identity.Version = "$env:APP_VERSION"
        $manifest.Package.Identity.Name = "61469LanceLotSoftware.DevReachCompanion"
        $manifest.Package.Identity.Publisher = "CN=51B5A8B2-5D86-4826-BBE2-C92E963A4C02"
        $manifest.Package.Properties.DisplayName = "Media File Manager"
        $manifest.Package.Properties.PublisherDisplayName = "Lancelot Software"
        $manifest.Package.Applications.Application.VisualElements.DisplayName = "Media File Manager"
        $manifest.save("src\DevReach2020\DevReach2020.Forms\UWP\Package.appxmanifest")
    
    # Build using StoreUpload instructions, no code signing required (Microsoft signs it during certification)
    - name: Build for Microsoft Store
      run: msbuild $env:Solution_Path /p:Platform=$env:Platform /p:AppxBundlePlatforms=$env:AppxBundlePlatforms /p:AppxPackageSigningEnabled=$env:SigningEnabled /p:Configuration=$env:Configuration /p:UapAppxPackageBuildMode=$env:AppxPackageBuildMode /p:AppxBundle=$env:AppxBundle /p:AppxPackageDir=$env:PackagesDir
      env:
        SigningEnabled: False
        AppxPackageBuildMode: StoreUpload
        PackagesDir: \AppPackagesStore\

    # Use Store Broker to directly publish the package to Microsoft Store
    # - name: Submit to Microsoft Store using Store Broker
    #   shell: pwsh
    #   run: ./.scripts/SubmitToMsftStore.ps1
    #   env:
    #     PartnerCenterClientSecret: ${{ secrets:PARTNERCENTER_CLIENTSECRET }} 
    #     PartnerCenterTenantId: ${{ secrets:PARTNERCENTER_TENANTID }} 
    #     PartnerCenterClientId: ${{ secrets:PARTNERCENTER_CLIENTID }} 
    #     PartnerCenterStoreId: 9MZNMK3MPV8R

    - name: Upload build artifacts
      uses: actions/upload-artifact@v2
      with:
        name: UWP_Store_Artifacts
        path: ${{ env.Project_Directory }}\\AppPackagesStore\
